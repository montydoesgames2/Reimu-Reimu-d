//add this define to prevent errors showing up for version below latest test build. (contributed by nabbup)
#if GAMEAPP < 0x24060180
    define u8 BlendMode.OPAQUE = 0
#endif

//Added define for preprocessor check to allow compat with other mods without any one specific MISC mod needing to be active. (contributed by Nabbup)
#define MISC_ACTIVE

//Valid and Highest valid char checks. (Contributed by AtomicRay)
function bool isValidChar(u8 characters) //Determine what values are valid
{
	u8 slotnum = (global.game_mode == 0x2c) ? characters : (characters - 1)
	if (MISC.SetCharAsValid(slotnum))
		return true
		//technically you don't even need to use this sprite. you just need to HAVE a sprite named this.
		
	//All characters below knuckles & tails are valid
	if (characters <= 3 && !Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) || (Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS) && characters <= 4 && (global.game_mode != 0x2c))
		return true
	else
		return false
}

function bool isValidBluSphereChar(u8 characters) //Determine what values are valid
{
	if (MISC.SetBluSphereCharAsValid(characters)) && MISC.SetCharAsValid(characters)
		return true
		//technically you don't even need to use this sprite. you just need to HAVE a sprite named this.
		
	//All characters below knuckles & tails are valid
	if characters <= 3
		return true
	else
		return false
}

function u8 getHighestValidChar() //checks for the highest possible character
{
	for (u8 char = 0xff; char > 0x00; --char)
	{
		if isValidChar(char)
			return char
	}
	
	return 0x00
}

function u8 getHighestValidBluSphereChar() //checks for the highest possible character
{
	for (u8 char = 0xff; char > 0x00; --char)
	{
		if isValidBluSphereChar(char)
			return char
	}
	
	return 0x00
}

// fix for level select characters unable to be used in special stage
function bool LevelSelect.innerUpdate()
{
	bool base = base.LevelSelect.innerUpdate()
	if (global.game_mode == 0x34)
		SetGlobalCharacters()
	return base
}

//# address-hook(0x00d6d0) end(0x00d70a)
function void fn00d6d0()
{

	// Character selection
	u8 character = D0.u8
	u8 maxCharacterSelection = (Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) ? 255 : 254
	
	#if EXTRA_CHARACTERS_UNLIMITED
	if (u16[0xffffb07a] == 0x00)
	{

		if (control.pad1.pressed & CONTROL_UP)
		{
			// Reset "Blink" animation
			u8[A0 + 0x3c] = 0x00
			u8[A0 + 0x3d] = 0x00
			
			// While the slot is not Knuckles (and Tails), navigate through the default slots
			if character == maxCharacterSelection
			{
				objA0.animation.timer = ExtraChar.getLowestSlot()
				character = CHARS_SONIC_ALONE
			}
			else if (character != maxCharacterSelection && objA0.animation.timer == 0x00)
			{
				character = (character < maxCharacterSelection) ? (character + 0x01) : 0x00
				while !(isValidChar(character))
					{
					if character > getHighestValidChar()
						{
						if ExtraChar.getLowestSlot() > CHARACTER_UNSET
							{
							objA0.animation.timer = ExtraChar.getLowestSlot()
							character = CHARS_SONIC_ALONE
							}
						else
							{
							objA0.animation.timer = CHARACTER_UNSET
							character = CHARS_SONIC_AND_TAILS
							}
						}
					else
						character = (character < maxCharacterSelection) ? (character + 1) : CHARS_SONIC_AND_TAILS
					}
			}
			// Choose extra character after (actually in) Knuckles (and Tails) slot
			else
			{
				base.fn00d6d0()
				return
			}
			
			// Play "beep" sound
			playSound(0x5b)
		}
		else if (control.pad1.pressed & CONTROL_DOWN)
		{
			// Reset "Blink" animation
			u8[A0 + 0x3c] = 0x00
			u8[A0 + 0x3d] = 0x00
			
			// Set extra variables to highest available slot after Sonic and Tails slot
			if (character == CHARS_SONIC_AND_TAILS)
			{
				if ExtraChar.getLowestSlot() > CHARACTER_UNSET
					{
					objA0.animation.timer = ExtraChar.getHighestSlot()
					character = CHARS_SONIC_ALONE
					}
				else
					{
					objA0.animation.timer = CHARACTER_UNSET
					character = getHighestValidChar()
					}
			}
			// Choose extra character after (actually in) Knuckles (and Tails) slot
			else if objA0.animation.timer != 0x00
			{
				// When the extra variable is equal to the lowest slot; Go to Knuckles (and Tails) slot instead of extra character
				if (objA0.animation.timer == ExtraChar.getLowestSlot() && ExtraChar.getLowestSlot() > CHARACTER_UNSET)
				{
					objA0.animation.timer = CHARACTER_UNSET
					character = getHighestValidChar()
				}
				// Otherwise, go to the next extra character in descending order
				else
				{
					base.fn00d6d0()
					return
				}
			}
			else
			{
				character = (character > CHARS_SONIC_AND_TAILS) ? (character - 1) : maxCharacterSelection
				
				while !(isValidChar(character))
					character = (character > CHARS_SONIC_AND_TAILS) ? (character - 1) : maxCharacterSelection
								
				if (character == 4) && !(Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) //prevent loading knuckles & tails when not unlocked
					character = 3
			}
			
			// Play "beep" sound
			playSound(0x5b)
		}
	}
	
	D0 = character
	global.xtrachar = objA0.animation.timer
	
	#else
	
	if (u16[0xffffb07a] == 0x00)
	{

		if (control.pad1.pressed & CONTROL_UP) && !objA0.animation.timer
		{
			character = (character < maxCharacterSelection) ? (character + 1) : CHARS_SONIC_AND_TAILS
			
			while !(isValidChar(character))
				character = (character < maxCharacterSelection) ? (character + 1) : CHARS_SONIC_AND_TAILS
				
			playSound(SFX_CLICK)
			
			if (character == 4) && !(Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) //prevent loading knuckles & tails when not unlocked
				character = 5
		}
		else if (control.pad1.pressed & CONTROL_DOWN) && !objA0.animation.timer
		{
			character = (character > CHARS_SONIC_AND_TAILS) ? (character - 1) : maxCharacterSelection
			
			while !(isValidChar(character))
				character = (character > CHARS_SONIC_AND_TAILS) ? (character - 1) : maxCharacterSelection
				
			playSound(SFX_CLICK)
			
			if (character == 4) && !(Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) //prevent loading knuckles & tails when not unlocked
				character = 3
		}
		else
		{
			base.fn00d6d0()
		}
	}
	D0 = character
	#endif
}

// render clear portraits in data select (contributed by nabbup)
// note: i don't know the extent of which this works so if it doesn't work with your MISC character i don't know what to tell you lol.

function bool Standalone.onDrawVdpSpriteCompound(s16 px, s16 py, u8 size, u16 index, u16 renderQueue, u8 spriteCounter)
{
	u8 slotnum = max(s16(u16[A0 + 0x34] - 1), 0) // Character selection AFTER Knuckles & Tails
	if (objA0.update_address == 0x00d42c && objA0.animation.frame > 0x17 && !(index == 0x83BD || index == 0x93BD))
	{
		px = (objA0.position.x.u16 - 0xa8) + 40
		string key = MISC.getClearPortrait(objA0.value3b, slotnum)
		if (Renderer.hasCustomSprite(key))
		{
			Renderer.drawCustomSprite(key, px, 136, 0x00, SPRITE_FLAG_PRIO, 0x9feb)
			return true
		}
	}
	return base.Standalone.onDrawVdpSpriteCompound(px, py, size, index, renderQueue, spriteCounter)
}

// Render character, or they'll be a random sprite from the Data Select

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	u16 characters = (objA0.update_address == 0x00d30c) ? dataselect.nosave_characters : u16[A0 + 0x34]
	u8 slotnum = characters - 1 // Character selection AFTER Knuckles & Tails
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0x00

	// Render character in data select, or they'll be a random sprite from the Data Select
	if (objA0.update_address == 0x00d30c || objA0.update_address == 0x00d42c)
	{
		if slotnum > 3
		{
		MISC.drawCharSprite(px, py, renderQueue, slotnum)
		objA0.animation.sprite = 0
		}
	}

	//Other Renderhooking stuff (Contributed by AtomicRay)
	// - Continue and lives icons:
	// (Assistance provided by nabbup)
	if (objA0.update_address == 0x00d42c)
	{
		bool saveGameSlotUsed = objA0.compound.sprite1.animation.sprite != 0x0f
		if (saveGameSlotUsed)
		{
			if slotnum > 3
			{
			MISC.drawLifeContSprite(px, py, renderQueue, slotnum)
			}
		}
		
	}
	
	// Bluesphere game menu;
	// - Character bumpers:
	// (Contributed by AtomicRay)
	if (objA0.update_address == 0x04d6b8)
	{
		if levelselect.characters > 3 //checks for if character is over the base 3
		{
			u8 flags = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0x00) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0x00) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0x00)
			
			Renderer.drawSprite(stringformat("bump_char%d_0x%02x", levelselect.characters, objA0.animation.sprite), px, py, 0x00, flags, renderQueue) //Renders if there's a corresponding sprite for the slot in the files
			return true
		}
	}

	if (objA0.update_address == 0x0837b2) && global.characters > 3 //signpost fixes
	{
		if (objA0.animation.sprite == 0x00)
		{		
			u64 key = 0
			u8 atex = 0x40 + 0x20 * getMainCharacter()
			u8 flags = prioFlag ? SPRITE_FLAG_PRIO : 0
			//Depending on who the loaded MISC is a base of, will replace respective signpost.
			u8 character
			if getMainCharacter() == CHARACTER_SONIC
				character = (objA0.animation.sprite == 0) ? global.characters : (objA0.animation.sprite == 1) ? CHARACTER_TAILS : (objA0.animation.sprite == 2) ? CHARACTER_KNUCKLES : 0xff
			else if getMainCharacter() == CHARACTER_TAILS
				character = (objA0.animation.sprite == 0) ? CHARACTER_SONIC : (objA0.animation.sprite == 1) ? global.characters : (objA0.animation.sprite == 2) ? CHARACTER_KNUCKLES : 0xff
			else if getMainCharacter() == CHARACTER_KNUCKLES
				character = (objA0.animation.sprite == 0) ? CHARACTER_SONIC : (objA0.animation.sprite == 1) ? CHARACTER_TAILS : (objA0.animation.sprite == 2) ? global.characters : 0xff

			if (character != 0xff)
				key = getCharacterSignpostSpriteKey(character) //note that you will need to edit this function to accomodate for more signposts
			Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
			return true
		}           
	}

	// Fix Big character sprites not showing up for characters above value 3, this is caused by character defaulting to CHARACTER_SONIC which registers as char 1 in the game, loading incorrect palettes and endpose.
	if (objA0.update_address == 0x05e18a || objA0.update_address == 0x05f4e4)
	{
		u64 key = 0
		u8 atex = (objA0.update_address == 0x05e18a) ? 0x20 : 0
		u8 flags = prioFlag ? SPRITE_FLAG_PRIO : 0

		if global.characters >= 4
			{
				//key = getCharacterEndPoseSpriteKey(global.characters, true)
				//if you don't want super sprites, you can technically just ignore the SuperActive variable in your version of the getCharacterEndPoseSpriteKey function

				if (objA0.animation.sprite == 0x02) //super
				{
					key = getCharacterEndPoseSpriteKey(global.characters, true)
				}
				else // if (objA0.animation.sprite <= 0x01) //not super
				{
					key = getCharacterEndPoseSpriteKey(global.characters, false)
				}

				//make sure to edit base function for getCharacterEndPoseSpriteKey() to include your custom sprites. should add example function for ease of use
			}
		if (Renderer.hasCustomSprite(key))
		{
			// Check if there's also a custom palette
			string paletteKey = getCharacterEndPosePaletteKey(global.characters)
			//same thing here if there's a custom palette for the endpose. otherwise, you can just do what amy galore did, and default to the base pal.
			if (System.hasExternalPaletteData(paletteKey, MISC.getEndposePaletteLine(global.characters)))
			{
				atex = 0x40 + getMainCharacter() * 0x20
			}
			Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
			return true
		}
	}

	//small and micro plane
	//small plane and micro outside
	//0x05d86a is contemporarily the small tornado flying right and the micro one flying left!
	if (objA0.update_address == 0x05d86a)
	{
		//if flying left use the micro character
		if (char.render_flags & 0x01) && slotnum > 3
		{
			u8 flags = prioFlag ? SPRITE_FLAG_PRIO : 0x00
			u8 flags2 = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
			string key = MISC.getMiniChar(global.characters) //use global.characters when in-game


			SpriteHandle MiniMicro = Renderer.addSpriteHandle(key, px, py, renderQueue+1) //sprite handles my beloved
			MiniMicro.setPaletteOffset(0x40)
			MiniMicro.setFlags(flags2)
			Renderer.drawCustomSprite(key, px, py, 0, flags, 0) // The pilot and the plane, make it nobody
			Renderer.addSpriteMask(px - 11, py - 28, 23, 20, renderQueue + 1, 8000)
		}
		else
		{ //this would be the small tornado, so render normally.
			return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
		}
	}

	//this is only if you want a custom pilot (not sonic tails or knux) in the big & small variants, mini variants have a whole different thing.
	// Character sprites for riding the Tornado in the ending
	if (objA0.update_address == 0x05ebb4 || objA0.update_address == 0x05ed18 || objA0.update_address == 0x0677ce || objA0.update_address == 0x067800) && (global.characters == CHARACTER_REIMU)
	{
		string key = 0
		if (objA0.update_address == 0x05ebb4 || objA0.update_address == 0x0677ce || objA0.update_address == 0x067800)
		{
			key = "tornado_pilot_marisa" //Make this whoever you want
		}
		else //if (objA0.update_address == 0x05ed18)
		{
			if (objA0.subtype2c == 0) //same thing is done here
				key = "tornado_pilot_marisa_small" //make this whoever you want
			else
				key = "tornado_reimu_small"
		}
	
		if !(objA0.update_address == 0x0677ce || objA0.update_address == 0x067800)
		{
			Renderer.drawCustomSprite(key, px, py, ((objA0.subtype2c == 0) ? 0x60 : 0x40), (objA0.render_flags & render_flag.FLIP_X) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
			return true
		}
		else
		{
			Renderer.drawCustomSprite(key, px, py - 16, 0x60, (objA0.render_flags & render_flag.FLIP_X) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue + 2)
			Renderer.addSpriteMask(px - 11, py - 28, 23, 20, renderQueue + 1, 8000)
			return false
		}
	}

	// Outro;
	// - Characters on the Best ending:
	if ((objA0.update_address == 0x05f376 || objA0.update_address == 0x05f39e) && objA0.subtype2c == 0x06)
	{
		u8 character = global.characters
		u8 atex = 0x40 + character * 0x20
		u64 key
		u8 AnimEnd = (objA0.animation.sprite >= 0x03)
		u8 animation = MISC.EndLogoGetAnimTimings(AnimEnd)
		key = MISC.getEndLogoSprites(animation)
		SpriteHandle Char = Renderer.addSpriteHandle(key, px, py, 0xffff)
		Char.setPaletteOffset(0xa0)
		return true
	}
	
	if (global.game_mode == 0x14) && global.characters >= 4
	{
		u8 flags = prioFlag ? SPRITE_FLAG_PRIO : 0x00
		// Continue Icons
		if (objA0.update_address == 0x05ca5c)
		{
			if (objA0.animation.sprite != 0)
				objA0.animation.sprite = 1
			u64 key = MISC.getContinueIcons(objA0.animation.sprite)
			if (Renderer.hasCustomSprite(key))
				{
				Renderer.drawCustomSprite(key, px, py, 0x40, flags, renderQueue)
				return true
				}
		}

		if !MISC.HasPartner(global.characters + 1)
		{
			if (objA0.update_address == 0x05c660 || objA0.update_address == 0x05c838)
			{
				u64 key
				u8 atex = 0x40 + getMainCharacter() * 0x20
				if (objA0.animation.sprite >= 0xbd && objA0.animation.sprite <= 0xbe)
					key = MISC.getContinueSprites((global.framecounter >> 0x04) % 0x02)
				else
					key = MISC.GetCharSpriteKey(objA0.animation.sprite)
				if (Renderer.hasCustomSprite(key))
				{
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
				return true
				}
				
			}
		}
		else
		{
			if (objA0.update_address == 0x05c55c || objA0.update_address == 0x05c588)
			{
				u8 character = (objA0.update_address == 0x05c55c || (objA0.update_address == 0x05c588 && !MISC.HaveCharacterTurnAround(global.characters))) ? CHARACTER_SONIC : (objA0.update_address == 0x05c74a) ? CHARACTER_TAILS : CHARACTER_KNUCKLES
				u8 atex = 0x40 + character * 0x20
				u64 key
				if character == getMainCharacter()
				{
					key = MISC.getPartnerContinueSprites(global.characters)
					if !(Renderer.hasCustomSprite(key))
					{
						if (objA0.animation.sprite >= 0 && objA0.animation.sprite <= 1) // used when tails is with you in the screen
							key = MISC.GetCharSpriteKey(0x5a)
						else
							key = MISC.GetCharSpriteKey(objA0.animation.sprite)
					}
				}
				else
					{
					key = stringformat("%s_continue_0x%02x", getCharacterSpriteKey(character, false), (character == CHARACTER_SONIC) ? objA0.animation.sprite : (character == CHARACTER_TAILS) ? objA0.animation.sprite-5 : objA0.animation.frame)
					}
				if (Renderer.hasCustomSprite(key))
				{
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue+10)
					return true
				}
			}
			return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
		}
	}
	
return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

//# address-hook(0x05eb32) end(0x05eb66)
function void fn05eb32() //set the character in the tornado for custom characters (it can be whoever you want)
{
	if (global.characters < 4) //if you want another character except for tails as the pilot, you can change the parameters to just be if global.characters is NOT your slot number.
	{
		base.fn05eb32()
		return
	}

    objA0.update_address = 0x05ebb4

    A1 = 0xffff0000 + u16[A0 + 0x46]
    objA0.sprite_priority = objA1.sprite_priority
    objA0.box_size.x = 0x20
    objA0.box_size.y = 0x20
    if (objA1.render_flags & render_flag.WORLD)
    {
        objA0.render_flags |= render_flag.WORLD
    }

    // Select character in Tornado by custom char number
    // you can only select between Tails, sonic, and knuckles' sonic variant. if you want to add a custom pilot, look at Standalone.onWriteToSpriteTable().
    if (global.characters > 3)
    {
        MISC.getPilot(global.characters) //you can set your own parameters in this function
    }
}

// Small characters on Tornado

//# address-hook(0x05ecb4) end(0x05ed0c)
function void fn05ecb4()
{
	//this accounts for all slots
	if global.characters < 4
		{
			base.fn05ecb4()
			return
		}

	setupObjectAttributesFull(0x0600e6)

	A1 = 0xffff0000 + u16[A0 + 0x46]
	u8[A0 + 0x0a] = (u8[A0 + 0x0a] & ~0x80) | (u8[A1 + 0x0a] & 0x80)
	if ((objA1.render_flags & render_flag.WORLD) == 0)
	{
		objA0.render_flags &= ~render_flag.WORLD
	}

	objA0.update_address = 0x05ed18
	
	//this is the only edited part
	u16 offset = MISC.getSmallPilot(global.characters) //use this to set values in helperfunctions
	// 1 - tails
	// 2 - sonic
	// 3 - sonic (knuckles' version)
	// if you want knuckles or another character as the pilot, you'll need to look at Standalone.onWriteToSpriteTable().
	
	if (isMainCharacter(CHARACTER_KNUCKLES) && (outro.ending_type >= 0))
	{
		++offset	// Knuckles with Master Emerald
	}
	offset *= 2	// From here, first byte is the plane pilot, second byte is character standing on the wings
	if (objA0.subtype2c != 0)
	{
		++offset	// Get offset of sprite for character on wings
	}
	objA0.animation.sprite = u8[0x05ed0e + offset]

#if STANDALONE
	if (isMainCharacter(CHARACTER_KNUCKLES))
	{
		// Set correct colors for Knuckles, and for Sonic in the Tornado
		// TODO: This is not using custom palettes, so there's no palette effect for Hyper Knuckles
		u16[0xfffffc04] = 0x064e
		u16[0xfffffc06] = 0x020c
		u16[0xfffffc08] = 0x0206
		if (global.zone_act == 0x0d01)
			copyMemory(0xfffffc20, 0x0a8a3c, 0x20)

		if (objA0.subtype2c == 0 && isSecondCharacter(CHARACTER_TAILS))
		{
			// Special handling for Knuckles & Tails game: Put Tails into the Tornado
			objA0.animation.sprite = 0x0c
		}
	}
#endif
}

//this renders the lives & conts icons before the renderhook.
//# address-hook(0x00c97a) end(0x00ca12)
function void fn00c97a()
{
	A2 = 0x00da8a
	A3 = 0xffffb128
	D7.u16 = 0xd220
	A0 = 0xffffe6ac
	for (u8 slot = 0; slot < 8; ++slot)
	{
		bool saveGameSlotUsed = (u8[A0] & 0x80) == 0
		u16 characters = u16[A3 + 0x34]
		if (!saveGameSlotUsed)
		{
			characters = CHARS_SONIC_AND_TAILS
		}
		else if (characters == CHARS_SONIC_AND_TAILS)	// Handle Sonic & Tails - show Sonic's icons
		{
			characters = CHARS_SONIC_ALONE
		}
	#if STANDALONE
		else
		{
			if (characters == 4 && Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) //fix for knuckles & tails' icons
				characters = min(characters, 3)		// Handle Knuckles & Tails - show Knuckles' icons
		}
	#endif

		if (characters <= 3) // get rid of the icons if using a MISC character (because it starts writing junk after K&T)
		{
			// Draw icons for lives & continues
			A1 = A2 + characters * 32
			D0 = VDPHelper.getDirectVRAMWriteCode(D7.u16)
			D1 = 2
			D2 = 4
			fn001506()
		}

		// Draw lives & continues numbers
		if (!saveGameSlotUsed)
		{
			A1 = 0x00db08
			D0 = VDPHelper.getDirectVRAMWriteCode(D7.u16 + 6)
			D1 = 1
			D2 = 4
			fn001506()
		}
		else
		{
			// Render lives digits
			D0.u8 = u8[A3 + 0x3e]	// Get lives data from save file
			fn00ca14()

			D0 = VDPHelper.getDirectVRAMWriteCode(D7.u16 + 6)
			D1 = 1
			D2 = 1
			fn001506()

			// Render continues digits
			D0.u8 = u8[A3 + 0x3f]	// Get continues data from save file
			fn00ca14()

			D0 = VDPHelper.getDirectVRAMWriteCode(D7.u16 + 0x306)
			D1 = 1
			D2 = 1
			fn001506()
		}

		D7.u16 += 0x1a
		A0 += 10
		A3 += 0x4a
	}
}

//# address-hook(0x0067b6) end(0x0067ec)
function void SetGlobalCharacters()
{
	if u8[0xffffe654]
	{
		base.SetGlobalCharacters()
		return
	}

	if (global.game_mode != 0x88 && competition_mode.active == 0)
	{
	#if STANDALONE
		// Handle Knuckles & Tails
		if u8[sharedmemory.MISCslots + dataselect.slot_selected - 1] > 4
			levelselect.characters = u8[sharedmemory.MISCslots + dataselect.slot_selected - 1]
		useKnucklesAndTails = (levelselect.characters == CHARS_KNUCKLES_AND_TAILS)
		global.characters = (levelselect.characters < CHARS_KNUCKLES_AND_TAILS) ? levelselect.characters : levelselect.characters - 1
		global.characters = min(global.characters, 254) //change this to 254 so that it supports values over 4. not 255 since knuckles & tails count as slot 3 still

		MISC.setDiscordDetails()
		
		//global.characters values 4 and onwards aren't used by the base game
	#endif
	} //Rest of these are fallbacks
	else if (global.zone == 0x07)	// MHZ
	{
		global.characters = CHARS_KNUCKLES_ALONE
	}
	else if (global.lock_on_state == 0)
	{
		global.characters = CHARS_SONIC_AND_TAILS
	}
	else
	{
		global.characters = CHARS_SONIC_ALONE
	}
}

function void MISC.setDiscordDetails()
{
	string name = MISC.GetCharNameDiscordRPC(global.characters)
	if (!name || global.characters < 4)
		return
	string emeralds
	if (global.chaos_emeralds == 0 && global.super_emeralds == 0)
		emeralds = "none"
	else if (global.super_emeralds == 0)
	{
		if (global.chaos_emeralds == 7)
			emeralds = "(All Chaos Emeralds)"
		else if (global.chaos_emeralds > 0)
		{
			emeralds = stringformat("(%d Chaos Emerald%s)", global.chaos_emeralds, global.chaos_emeralds != 1 ? "s" : "")
		}
	}
	else // super emeralds aren't 0
	{
		if (global.super_emeralds == 7)
			emeralds = "(All Super Emeralds)"
		else if (global.super_emeralds > 0)
		{
			emeralds = stringformat("(%d Super Emerald%s)", global.super_emeralds, global.super_emeralds != 1 ? "s" : "")
		}
	}
	if (emeralds == "none")
		emeralds = ""
	else
		emeralds = stringformat(" %s", emeralds)
	string str = stringformat("%s%s", name, emeralds)
	Game.setDiscordSmallImage("character_unknown")
	Game.setDiscordDetails(str)
}

//fix for tails not spawning in cnz and mhz. this just changes the parameters for spawning AI tails and returns base if not on either level, or global.characters is below a certain value.
//# address-hook(0x0067ee) end(0x0069b6)
function void fn0067ee()
{
	if global.characters <= 3 || SpawnAITails(global.characters) == false || MISC.getAllowedZones(global.characters) == 0x0b //you can also set your own parameters, for example if your character has a custom level intro, just make it return base if your slotnum is active
	{
		base.fn0067ee()
		if System.getGlobalVariableValueByName("customZoneSelect.useAlternates") == 1
			return
		MISC.DoCustomIntroInteractions()
		return
	}
	if System.getGlobalVariableValueByName("customZoneSelect.useAlternates") == 1
	{
		base.fn0067ee()
		return
	}

	u32[0xffffb094] = addressof(ResetDynamicObjectList)
	InitializeGameCharacters()
	RestoreShield()
	if (checkpoint.number != 0 || global.stage_type != 0)
		return

	A1 = 0xffffb000
	A2 = 0xffffb04a
	if (global.zone_act == 0x0300)
	{
		// Carnival Night Zone
		//spawn ai tails
		u32[0xffffb04a] = addressof(Character.BaseUpdate.Tails)
		u16[0xffffb04a + 0x10] = u16[0xffffb000 + 0x10]
		u16[0xffffb04a + 0x14] = u16[0xffffb000 + 0x14]
		tails.ai_routine = 0
	}
	else if (global.zone_act == 0x0700)
	{
		// Mushroom Hill Zone
		if (global.lock_on_state == 0)
		{
			//spawn ai tails
			u32[0xffffb04a] = addressof(Character.BaseUpdate.Tails)
			u16[0xffffb04a + 0x10] = u16[0xffffb000 + 0x10]
			u16[0xffffb04a + 0x14] = u16[0xffffb000 + 0x14]
			tails.ai_routine = 0
		}
	}
	else
	{
		base.fn0067ee()
	}
	MISC.DoCustomIntroInteractions()
}

// Fix to prevent signpost from causing a major visual error when it stops spinning, but only for anybody beyond Knux & Tails char selection

//# address-hook(0x0838c2) end(0x08390c)
function void fn0838c2()
{
	if (global.characters < 4) || u8[0xffffe654]
	{
		base.fn0838c2()
		return
	}

	if (objA0.flags38 & 0x01)
	{
		Object.AnimationProgressByLocalA1()
		--objA0.countdown_value
		if (objA0.countdown_value >= 0)
			return

		objA0.base_state = 0x06
		u8[0xfffffabe] = 0xff
		objA0.velocity.x = 0
		objA0.velocity.y = 0
		objA0.animation.sprite = u8[0x08390e + 1] //Set it to Sonic's signpost
		player2.control_override = 0xff
	}
	else
	{
		// Touched a monitor
		objA0.base_state = 0x02
		objA0.state = 0x20
		objA0.velocity.y = -0x200
	}
}

//Unedited function. Spawns the characters.

//global.characters won't change, so you can use this to choose a base character like ES, but use global.characters as a check instead of global.xtrachar

//# address-hook(0x006a76) end(0x006bd6)
function void InitializeGameCharacters()
{
	if u8[0xffffe654] || (competition_mode.active)
	{
		base.InitializeGameCharacters()
		return
	}

	// One of the bonus stages?
	if (global.zone_act >= 0x1300 && global.zone_act < 0x1600)
	{
		hud.dirty.timer = 0

		if (global.zone_act == 0x1400)
		{
			u32[0xffffb172] = 0x049eee
			u16[0xffffb172 + 0x10] = 0x78
			u16[0xffffb172 + 0x14] = 0xf30
			ring_counter = checkpoint.rings
			extra_lives_granted = checkpoint.lives_granted
			hud.dirty.rings = 1
		}
		else if (global.zone == 0x15)
		{
			u8[0xffffe408] = 0
			u16[0xffffe406] = 0
			u32[0xffffb000] = 0x04b958
			fn04b6aa()
			u8[0xffffee30] = 0xff
			return
		}
	}

	bool spawnSecondPlayerTails = false
	if (isMainCharacter(CHARACTER_SONIC))
	{
		// Spawn Sonic
		u32[0xffffb000] = addressof(Character.BaseUpdate.Sonic)
		u32[0xffffcc54] = 0x018b3e
		u32[0xffffcce8] = addressof(InstaShield.Init)
		u16[0xffffcce8 + 0x42] = 0xb000

		// Also spawn Tails if needed
		spawnSecondPlayerTails = isSecondCharacter(CHARACTER_TAILS)
	}
	else if (isMainCharacter(CHARACTER_TAILS))
	{
		// Spawn Tails
		u32[0xffffb000] = addressof(Character.BaseUpdate.Tails)
		u32[0xffffcc9e] = 0x018b3e
		u16[0xffffb000 + 0x14] += 4
		tails.ai_routine = 0
	}
	else if (isMainCharacter(CHARACTER_KNUCKLES))
	{
		// Spawn Knuckles
		u32[0xffffb000] = addressof(Character.BaseUpdate.Knuckles)
		u32[0xffffcc54] = 0x018b3e

	#if STANDALONE
		// Also spawn Tails if needed -- except for Knuckles' final fight in SSZ
		spawnSecondPlayerTails = (isSecondCharacter(CHARACTER_TAILS) && global.zone_act != 0x0a01)
	#endif
	}
	else
		assert(false, "Unsupported character selection")

	if (spawnSecondPlayerTails)
	{
		u32[0xffffb04a] = addressof(Character.BaseUpdate.Tails)
		u16[0xffffb04a + 0x10] = u16[0xffffb000 + 0x10] - 0x20
		u16[0xffffb04a + 0x14] = u16[0xffffb000 + 0x14] + 4
		u32[0xffffcc9e] = 0x018b3e
		tails.ai_routine = 0
	}
}

global bool MISC.CharSelection

//# address-hook(0x007a74) end(0x007d20)
//# translated(0x007d64) end(0x007d6a)
function void LevelSelect()
{
	MISC.CharSelection = true //set the value when initialising. nothing else changes.
	base.LevelSelect()
}

//# address-hook(0x007e64) end(0x007f1e)
//# translated(0x007f46) end(0x007f60)
function void fn007e64()
{
	u8 value = 0x20 // default sound test position
	if (Mods.isModActive("Sonic 3 Complete Level Select+"))
		value = 0x22
	#if EXTRA_CHARACTERS_UNLIMITED
	if (control.pad1.pressed & CONTROL_A && levelselect.selection != value)
	{
		playSound(0xaf)
		levelselect.xtrachar = false
		global.xtrachar = CHARACTER_UNSET
		levelselect.characters = 0
		if MISC.CharSelection == false
		{
			MISC.CharSelection = true
		}
		else if MISC.CharSelection == true
		{
			MISC.CharSelection = false
		}
		System.writeDisplayLine((MISC.CharSelection == true) ? "MISC characters active!" : "ESU characters active!")
	}
	
	if MISC.CharSelection == false
	{
		base.fn007e64()
		return
	}
	#endif

	if (levelselect.selection != value)
	{
		if (control.pad1.pressed & CONTROL_C)
		{
			u8 maxCharacterSelection = (Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) ? 255 : 254

			levelselect.characters += 1
			
			while !(isValidChar(levelselect.characters))
				levelselect.characters = (levelselect.characters < maxCharacterSelection) ? (levelselect.characters + 1) : CHARS_SONIC_AND_TAILS
			return
		}
	}
	base.fn007e64()
}

//Loading new chars into blue spheres without breaking compat with ESU (Contributed by AtomicRay)
global bool NewCharBluspheres

//Load new characters in blue spheres
//# address-hook(0x04d6b8) end(0x04d7a0)
function void fn04d6b8()
{
#if EXTRA_CHARACTERS_UNLIMITED
	if (Input.buttonPressed(BUTTON_X))
		{
		base.fn04d6b8()
		return
		}
#endif

#if STANDALONE
	// Do the following only once in total, i.e. only for the right object
	if (objA0.render_flags & render_flag.FLIP_X)
	{
		if (levelselect.characters == CHARS_TAILS_ALONE)
		{
			// Manipulate the palette for Tails
			BlueSphereGame.applyTailsPalette(0xfffffc00)
		}

		// Render the BG logo in the right colors again
		Renderer.drawCustomSprite("sklogo", getScreenWidth() / 2, 40 - scrolloffset.y.planeB, 0x00, 0, 0x1700)
	}
#endif

	if (bluespheregame.fully_unlocked != 0)
	{
		A1 = u32[A0 + 0x30]
		D0 = bluespheregame.menu_selection * 4
		D2.u16 = u16[A1 + D0.u16] + getScreenExtend()
		D3.u16 = u16[A1 + D0.u16 + 2]

		// Update velocity-x
		bool skipPart = false
		if (D2.u16 == objA0.position.x.u16)
		{
			D0.u16 = objA0.velocity.x + 0x80
			if (D0.u16 <= 0x0100)
			{
				D1 = 0
				objA0.velocity.x = D1.u16
				skipPart = true
			}
		}

		if (!skipPart)
		{
			D1.u16 = 0x40
			if (D2.s16 < s16(objA0.position.x.u16))
			{
				D1.s16 = -D1.s16
				if (objA0.velocity.x >= 0)
				{
					D1.u16 *= 4
				}
			}
			else
			{
				if (objA0.velocity.x < 0)
				{
					D1.u16 *= 4
				}
			}
		}
		objA0.velocity.x += D1.u16

		// Update velocity-y
		skipPart = false
		if (D3.u16 == objA0.position.y.u16)
		{
			D0.u16 = objA0.velocity.y + 0x0100
			if (D0.u16 <= 0x0200)
			{
				D1 = 0
				objA0.velocity.y = D1.u16
				skipPart = true
			}
		}

		if (!skipPart)
		{
			D1.u16 = 0x80
			if (D3.s16 < s16(objA0.position.y.u16))
			{
				D1.s16 = -D1.s16
				if (objA0.velocity.y >= 0)
				{
					D1.u16 *= 4
				}
			}
			else
			{
				if (objA0.velocity.y < 0)
				{
					D1.u16 *= 4
				}
			}
		}
		objA0.velocity.y += D1.u16

		UpdateMovementStraightSimple()
	}

	--objA0.animation.timer
	if (s8(objA0.animation.timer) < 0)
	{
		objA0.animation.timer = 2
		++objA0.animation.sprite
		objA0.animation.sprite &= 0x07
	}

#if STANDALONE
	if (control.pad1.pressed & CONTROL_B || Input.buttonPressed(BUTTON_BACK))
	{
		if ((objA0.render_flags & render_flag.FLIP_X) == 0)		// Only consider first of the two objects
		{
			if (bluespheregame.menu_selection == 1)
			{
				// Back to the main menu
				playSound(0xad)

				u32 backupA0 = A0
				FadeOutScreenBlocking()
				A0 = backupA0

				Game.returnToMainMenu()
				yieldExecution()
				
				//Revert variable to false
				NewCharBluspheres = false
			}
			else if (bluespheregame.menu_selection == 2)
			{
				fn04d488()
			}
		}
		DrawObject()
		return
	}
#endif

	if (control.pad1.pressed & CONTROL_ABC)
	{
	
		D0.u16 = objA0.sprite_attributes
		if (D0.u16 == (sprite_attribute.PRIORITY | (BlueSphereGame.Bumpers.targetInVRAM >> 5))) && NewCharBluspheres == false
		{
			levelselect.characters = CHARS_SONIC_ALONE
			objA0.sprite_attributes = (sprite_attribute.PRIORITY | sprite_attribute.PALETTE.LINE3 | (BlueSphereGame.Bumpers.targetInVRAM >> 5))
		}
		else
	#if STANDALONE
		if (D0.u16 == (sprite_attribute.PRIORITY | sprite_attribute.PALETTE.LINE3 | (BlueSphereGame.Bumpers.targetInVRAM >> 5)))
		{
			levelselect.characters = CHARS_TAILS_ALONE
			objA0.sprite_attributes = (sprite_attribute.PRIORITY | sprite_attribute.PALETTE.LINE2 | (BlueSphereGame.Bumpers.targetInVRAM >> 5))
		}
		else if (D0.u16 == (sprite_attribute.PRIORITY | sprite_attribute.PALETTE.LINE2 | (BlueSphereGame.Bumpers.targetInVRAM >> 5)))
	#endif
		{
			levelselect.characters = CHARS_KNUCKLES_ALONE
			objA0.sprite_attributes = (sprite_attribute.PRIORITY | (BlueSphereGame.Bumpers.targetInVRAM >> 5))
			NewCharBluspheres = true
		}
		else if NewCharBluspheres == true //only if is set to the new characters
		{
			if levelselect.characters == getHighestValidBluSphereChar()
				{
				NewCharBluspheres = false
				levelselect.characters = CHARS_SONIC_ALONE
				objA0.sprite_attributes = (sprite_attribute.PRIORITY | sprite_attribute.PALETTE.LINE3 | (BlueSphereGame.Bumpers.targetInVRAM >> 5))
				//return to sonic slot
				}
			else
			{
				u8 maxCharacterSelection = (Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS)) ? 255 : 254
				for (u8 i = 4; i <= maxCharacterSelection; ++i) //go through all valid slots
				{
					if (isValidBluSphereChar(i) && i > levelselect.characters) //check for next valid slot
					{
						waitForNextFrame() //wait a frame, otherwise it will go up by 2 slots? for some reason???
						UpdateGameObjects() //update game objects (copyright symbol) for the singular frame it isn't.
						levelselect.characters = i //set correct value
						break //end loop
					}

					if (i >= maxCharacterSelection)
						break //end loop if it's the max character (failsafe, in case the above thing fails)
				}
			}
		}
	}

	DrawObject()
}

//Load knux's unique acts if getAllowedZones is knux's zones
//# address-hook(0x00da4e) end(0x00da6c)
function void fn00da4e()
{
	u8 slotnum = max(s16(u16[A0 + 0x34] - 1), 0)
	if slotnum < 4
		{
		base.fn00da4e()
		return
		}
	
	if (u16[A0 + 0x34] >= CHARS_KNUCKLES_ALONE && D0.u8 == 0x0b && MISC.getAllowedZones(slotnum) == 0x0b)
	{
		// Choose Knuckles' version of Sky Sanctuary
		D0.u16 = 0x0a01
	}
	else
	{
		// Lookup correct zone and act to start
		D0.u16 = u16[0x00da6e + (D0.u8 & 0x0f) * 2]
	}
}

function bool Standalone.onDrawVdpSpriteCompound(s16 px, s16 py, u8 size, u16 index, u16 renderQueue, u8 spriteCounter)
{
	if (index == 0x83BD || index == 0x93BD) // arrows in data select, draw them above everything else
	{
		Renderer.drawVdpSprite(px, py, size, index, 0x9ffb)
		return true
	}
	return base.Standalone.onDrawVdpSpriteCompound(px, py, size, index, renderQueue, spriteCounter)
}

//# address-hook(0x05f26c) end(0x05f2dc)
function void fn05f26c() //add the new character. to my knowledge, no way to base this, so.
{
	IsFading = false //reset the check
	if u8[0xffffe654] || global.characters < 4
	{
		base.fn05f26c()
		return
	}

	setupObjectAttributesFull(0x060154)

	// "Sonic the Hedgehog 3"
	objA0.update_address = 0x05f1f6
	if (objA0.subtype2c != 0)
	{
		objA0.update_address = 0x05f2ea
		objA0.countdown_value = 0x04af
		u8[0xfffffab8] &= ~0x04
	}

	A1 = 0x05f2e2
	fn05ff1c()

	copyMemory(0xfffffca0, 0x060ada, 0x20)

	// Attach trademark
	if (allocDynamicObjectStd())
	{
		objA1.update_address = 0x05f4fa
		u16[A1 + 0x46] = A0.u16
		u8[A1 + 0x2c] = 0x04
	}

	// Attach "& Knuckles"
	if (allocDynamicObjectStd())
	{
		objA1.update_address = 0x05f546
		u16[A1 + 0x46] = A0.u16
	}

	// "spawnChildObjects(0x0601f0)" replaced by:
	spawnChildObject(0x05f3aa, 0x02, -0x35, 0x14)		// Tails in best ending final screen
	spawnChildObject(0x05f31c, 0x00, -0x20, -0x14)		// Sonic in best ending final screen
	spawnChildObject(0x05f410, 0x04, 0x40, 0)		// Knuckles in best ending final screen
	spawnChildObject(0x05f31c, 0x06, 0x18, 0x12)		// custom character in best ending final screen
}

//# address-hook(0x05fefe) end(0x05ff1a)
function void fn05fefe()
{
	if global.characters < 4
	{
		base.fn05fefe()
		return
	}
	
	A1 += ((getMainCharacter() + 1) & 0x03) * 2
	objA0.position.x.u16 += s8[A1]
	objA0.position.y.u16 += s8[A1+1]
	A1 += 2
}

//# address-hook(0x05b42a) end(0x05b470)
function void fn05b42a()
{
	if global.characters < 4
	{
		base.fn05b42a()
		return
	}
	
    Kosinski.addToDMAQueue(0x0de362, 0x7de0)        // "& Knuckles" subtitle

    D0.u16 = ((getMainCharacter() + 1) & 0x03) - 2
    D1 = 0
    if (D0.s16 >= 0)
    {
        D1.u16 += (D0.u16 == 0) ? 0x18 : 0x30
    }
    if (global.lock_on_state == 0)
    {
        D1.u16 += 0x0c
    }
    if (s8[0xfffffa88] >= 0)
    {
        D1.u16 += (u8[0xfffffa88] == 0) ? 0x04 : 0x08
    }

    A2 = u32[0x05b472 + D1.u16]
    call A2
}

// No idea what this is, used when reaching DEZ 2 area after DEZ 1 boss

//# address-hook(0x05fd88) end(0x05fd9a)
function void fn05fd88()
{
	if global.characters < 4
	{
		base.fn05fd88()
		return
	}
	A1 = 0xffffb000
	D0.u16 = (getMainCharacter() + 1) & 0x03
	objA1.animation.sprite = u8[0x05fda0 + D0.u16]		// Player characters' standing sprites. notably this includes Knuckles, even though he normally doesn't go to this zone
	UpdatePlayer1SpritePatterns()
}

//# address-hook(0x05ef68) end(0x05efb4)
function void fn05ef68()
{
	if global.characters < 4
	{
		base.fn05ef68()
		return
	}
	
	objA0.update_address = 0x05f144
	objA0.countdown_value = 0x01ff
	super.palettefx.state = 0

	// Choose the right sequence of logos and eyecatch, based on certain criteria
	D0.u16 = ((getMainCharacter() + 1) & 0x03) - 2		// Sonic: -2 and -1, Tails: 0, Knuckles: 1
	D1 = 0	// Range of post-ending routines, starts with Sonic
	if (D0.s16 >= 0)
	{
		// Tails or Knuckles
		D1.u16 += (D0.u16 == 0) ? 0x30 : 0x60	// Choose the right range for each character
	}
	if (global.lock_on_state == 0)
	{
		// Lock-on active
		D1.u16 += 0x18		// latter half of range is for Sonic 3 & Knuckles, earlier half is just Sonic & Knuckles without lock-on (disc 2)
	}
	if (outro.ending_type >= 0)
	{
		// Good or best ending
		D1.u16 += (outro.ending_type == 0) ? 0x08 : 0x10		// Finally, choose the right table entry for each kind of ending
	}

	A1 = 0x05efb6 + D1.s16		// get entry of appropriate post credits routines from table
	A2 = u32[(A1+=4)-4]		// Assigns logo routine to execute
	objA0.countdown_callback = u32[(A1+=4)-4]		// Stores eyecatch routine for later
	call A2
}

global bool IsFading

//you probably hate me for doing this, but uh. bite me. :P it looks better, anyway.
//# address-hook(0x085590) end(0x0855b0)
//# alias(fn085590) deprecated
function void FadeOutColorUniform()
{
	base.FadeOutColorUniform()
	
	if global.zone_act != 0x0d01 //don't do this if you're not in the ending
		return
		
	IsFading = true
	super.palettefx.state = 0
}


//Continues screen

//# address-hook(0x05c2e0) end(0x05c4d4)
function void fn05c2e0()
{
	if global.characters < 4
	{
		base.fn05c2e0()
		return
	}
	
	FadeOutScreenBlocking()

#if !STANDALONE
	set_status_register(0x2700)
#endif

	VDP.Config.setActiveDisplay(false)
	VDP.Config.enableHInt(false)
	VDP.Config.setBackdropColor(0)
	kosinski.queue_size = 0

	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	fn0011ca()

	Nemesis.loadDataToVRAM(0x05d788, ContinueScreen.Numbers.targetInVRAM)			// Countdown digits
	Nemesis.loadDataToVRAM(0x0dde34, ContinueScreen.TextTiles.targetInVRAM)
	Nemesis.loadDataToVRAM(0x05cd66, ContinueScreen.Characters.targetInVRAM)		// Unique character continue sprites + countdown stars
	Nemesis.loadDataToVRAM(0x05d3c6, ContinueScreen.ContinueIcons.targetInVRAM)		// Continue icons

	global.level_started = 0
	u8[0xfffffaa9] = 0
	u8[0xfffffa88] = 0

	zeroMemory(0xffffb000, 0x2000)

	u32[0xfffffe66] = 0
	u32[0xfffffe6a] = 0
	fn01aa6e()
	global.demo_countdown = 659		// 11 seconds (minus one frame)

	copyMemory(0xfffffc80, 0x05cbca, 0x80)

	A1 = 0x05cb9e	// "CONTINUE"
	D2.u16 = 0x0292
	D6.u16 = (sprite_attribute.PRIORITY | (ContinueScreen.TextTiles.targetInVRAM >> 5))
	fn05b318()

	if (!isMainCharacter(CHARACTER_KNUCKLES))
	{
		if !MISC.HasPartner(global.characters + 1) || getMainCharacter() == CHARACTER_TAILS
		{
			u32[0xffffb000] = 0x05c660	// Sonic Alone in continue screen
		}
		else
		{
			u32[0xffffb000] = 0x05c52a	// Sonic in continue screen
			u32[0xffffb04a] = 0x05c718	// Tails in continue screen
		}
	}
	u32[0xffffb094] = 0x05c838	// Knuckles in continue screen

	A1 = 0xffffb0de
	objA1.update_address = 0x05c4d6	// Countdown

	u16[0xfffffaa4] = A1.u16
	u32[0xffffb128] = 0x05c9dc	// Stars next to the countdown
	fn05cb1c()

	UpdateGameObjects()
	RenderSprites()
	global.frame_state = 0x16

	waitForNextFrame()

	VDP.Config.setActiveDisplay(true)
#if STANDALONE
	// Load characters extended palettes
	loadCharacterPalette(CHARACTER_SONIC,    0x802180, 0)
	loadCharacterPalette(CHARACTER_TAILS,    0x8021c0, 0)
	loadCharacterPalette(CHARACTER_KNUCKLES, 0x802200, 0)
#endif
	playMusic(MUSIC_CONTINUE)
	Menu.FadeInAfterInit()

	while (true)
	{
		global.frame_state = 0x16
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()

		UpdateGameObjects()
		RenderSprites()
		Kosinski.ProcessModules()

		if (u8[0xfffffaa9] != 0)
			break
	}

	if (u8[0xfffffaa9] != 1)
	{
		// Time up, go back to title screen
		global.game_mode = 0
		return
	}

	global.game_mode = 0x0c			// Main Game
	lives_counter = 3
	unused.lives_counter.player2 = 3
	ring_counter = 0
	timer.alldata = 0
	player.score = 0
	ring_counter.player2 = 0
	timer.alldata.player2 = 0
	player2.score = 0
	player.next_life_score = 5000
	unused.player2.next_life_score = 5000
	--continues_counter

	sram.block_interrupts.u8 = 0xff
	UpdateLivesContinuesInSaveGame()
}

// load in your character's palette underneath Knuckles. (handled by a helper function)
//# address-hook(0x05f31c) end(0x05f36c)
function void fn05f31c()
{
	base.fn05f31c()
	if (global.characters <= CHARACTER_KNUCKLES)
		return
	MISC.loadEndScreenPalette()
}

function bool DEZFinalBoss3.canPlayerEnterDoomsday()
{
	if global.characters < 4
		return base.DEZFinalBoss3.canPlayerEnterDoomsday()

	if MISC.getAllowedZones(global.characters) == 0x0d
		return true
	else
		return false
}

//# address-hook(0x00c434) end(0x00c4d0)
function void SaveGameOnLevelFinished()
{
	if global.characters < 4
	{
		base.SaveGameOnLevelFinished()
		return
	}

	// Save game slot
	if (global.lock_on_state == 0 && global.active_saveslot != 0)
	{
		A1 = global.active_saveslot

		// Get the number of the next zone (using the usual internal zone numbering, see definition of global.zone.apparent)
		u8 offset = global.zone * 2 + global.act
		u8 nextZone = u8[0x00c404 + offset]

		bool gameCompleted = false
		if (u8[A1] & 0x03)
		{
			// This gets entered only for already completed games
			if (nextZone < u8[A1 + 0x03])
			{
				gameCompleted = true
			}
			else
			{
				// This is a weird case, supposedly needed for unlocking DDZ after collecting all Super Emeralds in an formerly complete game?
				u8[A1] &= 0xfc
			}
		}

		if (!gameCompleted)
		{
			u8[A1 + 0x03] = nextZone

			gameCompleted = (nextZone >= MISC.getAllowedZones(global.characters))

			if (gameCompleted)
			{
				u8[A1] = (global.chaos_emeralds < 7) ? 1 : (global.super_emeralds < 7) ? 2 : 3
			}

			u16[A1 + 0x04] = 0
		}

		lives_counter = min(lives_counter, 99)
		u8[A1 + 0x08] = lives_counter

	#if STANDALONE
		// Store additional data
		u32 slotIndex = (A1 - 0xffffe6ac) / 0x0a
		u32 address = 0x801100 + slotIndex * 0x20
		u32[address] = player.score
	#endif

		SaveGameSlot()
	}

	level.giantrings_clear = 0
}

function void loadCharacterPalette(u8 character, u32 targetAddress, u8 paletteVariant)
{
	if (global.characters > CHARACTER_KNUCKLES && global.zone_act == 0x0d01 && u8[0xffffe654] == 0)
	{
		global.zone_act = 0
		base.loadCharacterPalette(character, targetAddress, paletteVariant)
		global.zone_act = 0x0d01
		return
	}
	base.loadCharacterPalette(character, targetAddress, paletteVariant)
}

function void ExtraChar.loadCharacterPaletteOfAvailableExtraChars()
{
	if (global.characters > CHARACTER_KNUCKLES && u8[0xffffe654] == 0)
		return
	base.ExtraChar.loadCharacterPaletteOfAvailableExtraChars()
}

//Custom save loading CONTRIBUTED BY ATOMICRAY

define u32 sharedmemory.MISCslots = 0x81a460 //sharedmemory for saving MISC slots

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
//# address-hook(0x00d42c) end(0x00d69a)
function void fn00d42c()
{
	//set selection to correct character for each slot
	SetMISCSlots() //yes it does this every frame. deal with it, lol.
	base.fn00d42c()
}

//# address-hook(0x00c3e4) end(0x00c402)
function void SaveGameSlot()
{
	if levelselect.characters > 4
	{
		// Get the data from the sharedmemory
		u32 tempValue0 = sharedmemory.MISCslots + u32(dataselect.slot_selected - 0x01)
		u8[tempValue0] = levelselect.characters
		MISC.SaveSlots()

		//debugLog(stringformat("saved MISC char %d in slot %d, under data address 0x%06x", levelselect.characters, dataselect.slot_selected, tempValue0))
		u8[A1 + 0x02] = 0x30
	}
	base.SaveGameSlot()
}

function void InitSaveSlots()
{
	base.InitSaveSlots()
	zeroMemory(sharedmemory.MISCslots, 0x08)
	MISC.LoadSlots()
	MISC.SaveSlots()
	SetMISCSlots()
}

//reload saves when pages switch
function void ESS_ReloadSaves()
{
	base.ESS_ReloadSaves()
	zeroMemory(sharedmemory.MISCslots, 0x08)
	MISC.LoadSlots()
	SetMISCSlots()
}

function void MISC.LoadSlots()
{
	SRAM.load(sharedmemory.MISCslots, 0x460, 0x08)
	#if EXTRA_SAVE_SLOTS_ACTIVE
		System.loadPersistentData(sharedmemory.MISCslots, ESS_getSaveStr("MISC.slotdata"), 0x08)
	#else
		System.loadPersistentData(sharedmemory.MISCslots, "MISC.slotdata", 0x08)
	#endif
}

function void MISC.SaveSlots()
{
	SRAM.save(sharedmemory.MISCslots, 0x460, 0x08)
	#if EXTRA_SAVE_SLOTS_ACTIVE
		System.savePersistentData(sharedmemory.MISCslots, ESS_getSaveStr("MISC.slotdata"), 0x08)
	#else
		System.savePersistentData(sharedmemory.MISCslots, "MISC.slotdata", 0x08)
	#endif
}

function void SetMISCSlots()
{
	#if RMSSY_Active
		return
	#endif
	
	u32 tempValue1 = sharedmemory.MISCslots
	
	//Log = ((A0 - 0xffffb000) / 74) - 3
	
	// Loop simulates slots
	for (u8 i = 0x01; i < 0x09; ++i)
	{
		// Debug message
		//debugLog(stringformat("Slot address: 0x%06x, Extra address: 0x%06x, Extra loaded: %03d", i, tempValue1, u8[tempValue1]))
		// Set an extra character if it has been saved
		if ((((A0 - 0xffffb000) / 74) - 3) == i && isValidChar(u8[tempValue1]) && u8[tempValue1] > 4)
		{
			A2 = 0xffffe6ac + ((i-1)*0x0a)
			if  u8[A2 + 0x00] == 0x80 //fix save slots that have been deleted
			{
				zeroMemory(tempValue1 + i, 0x08)
				MISC.SaveSlots()
				u8[tempValue1] = 0
				u16[A0 + 0x34] = 0
			}
			else if u16[A0 + 0x34] < 5
			{
				u16[A0 + 0x34] = u8[tempValue1]
			}
		}
		
		// Go to next slot address
		tempValue1 += 0x01
	}
}

//erase MISC data from slots
//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
//# address-hook(0x00d8c4) end(0x00d90c)
function void fn00d8c4()
{
	base.fn00d8c4()
	if ((control.pad1.pressed & CONTROL_RIGHT) == 0x00)
	{
	if ((control.pad1.pressed & CONTROL_LEFT) == 0)
		{
			DrawObject()
			return
		}
	u32 tempValue0 = sharedmemory.MISCslots + u32(dataselect.slot_selected - 0x01)
	//debugLog(stringformat("MISC char #%d was deleted from slot #%d, Data address: 0x%06x", u8[tempValue0], dataselect.slot_selected, tempValue0))
	zeroMemory(tempValue0, 0x01)
	MISC.SaveSlots()
	}
}

//seriously? okay.
function void ESS_clearSave()
{
	base.ESS_clearSave()
	u32 tempValue0 = sharedmemory.MISCslots + u32(dataselect.slot_selected - 0x01)
	//debugLog(stringformat("MISC char #%d was deleted from slot #%d, Data address: 0x%06x", u8[tempValue0], dataselect.slot_selected, tempValue0))
	zeroMemory(tempValue0, 0x01)
	MISC.SaveSlots()
}

// Loading palette data - This is where we add the MISC palette
/*
function void copyPaletteDataFromTable(u8 index, u16 ramAddress)
{
	if (global.characters < 4 || u8[0xffffe654] > 0)
	{
		base.copyPaletteDataFromTable(index, ramAddress)
		return
	}
	base.copyPaletteDataFromTable(index, ramAddress)
	u32 dest = 0
	if (EXTENDED_CHARACTER_PALETTES)
	{
		u8 paletteVariant = 0xff
		if (index == 0x03 || index == 0x05)
		{
			paletteVariant = 0
		}
		else if (index == 0x2b || index == 0x2c)
		{
			paletteVariant = 1		// AIZ underwater
		}
		else if (index == 0x39)
		{
			paletteVariant = 2		// ICZ underwater
		}
		else if (index == 0x31 || index == 0x32)
		{
			paletteVariant = 3		// HCZ underwater
		}
		else if (index == 0x2d  || index == 0x2e || index == 0x3a)
		{
			paletteVariant = 4		// CNZ/LBZ underwater
		}

		if (paletteVariant != 0xff)
		{
			if (paletteVariant == 0)
			{
				// Load all characters' normal (non-underwater) palettes, either to fading or non-fading palette buffer
				dest = (ramAddress == 0xfc00) ? 0x802000 : 0x802180
				loadCharacterPalette(CHARACTER_SONIC,    dest + 0x00, 0)
				loadCharacterPalette(CHARACTER_TAILS,    dest + 0x40, 0)
				loadCharacterPalette(CHARACTER_KNUCKLES, dest + 0x80, 0)
				loadCharacterPalette(4, ((ramAddress == 0xfc00) ? 0x8020c0 : 0x802240), paletteVariant) // MISC char
			}
			else
			{
				// Load all characters' underwater palettes, either to fading or non-fading palette buffer
				dest = (ramAddress == 0xf080) ? 0x802300 : 0x802480
				loadCharacterPalette(CHARACTER_SONIC,    dest + 0x00, paletteVariant)
				loadCharacterPalette(CHARACTER_TAILS,    dest + 0x40, paletteVariant)
				loadCharacterPalette(CHARACTER_KNUCKLES, dest + 0x80, paletteVariant)
				loadCharacterPalette(4, ((ramAddress == 0xfc00) ? 0x8023c0 : 0x802540), paletteVariant) // MISC char
			}
		}
	}
}
*/

#if RMSSY_Active
function void waitForNextFrame()
{
	if global.game_mode == 0x4c
		Renderer.drawText("oxyfont_regular:gradient:outline(0x000000ff,1,false):shadow(1,1,0.5f,0.8f)", getScreenWidth()/2, getScreenHeight() - 30, "MISC chars must be below RMSSY in order to work!\nDon't worry, your slots have not been corrupted ;P", 0xffff00ff, 2, 0, 0xe001, false, true)
	base.waitForNextFrame()
}

function void RMSSY.UpdatePages()
{
	return
}
#endif
